# -*- coding: utf-8 -*-
"""GPBoost Gaussian Process Mixed-Effects Model Binary Classifier
"""

import numpy as np
import sys
import os
import sklearn as sk
import gpboost as gpb
import pandas as pd

DATA_FILE = sys.argv[1]     # CSV file with features, groups, and labels
FEATURE_NAMES = sys.argv[2] # column header names (treated as strings) to use as features (data in rows, i.e. generated by np.savetxt)
GROUP_LABELS_CSV = sys.argv[3]  # filename of a (potentially) multicolumn csv file with header of group labels
CLASS_LABELS_COL = sys.argv[4]  # column header name (string) to use for class labels (i.e. y)
TRAIN_INDEX_COL = sys.argv[5]   # column header name (string) that has a 1 if that row of features should be used for training
OUTPUT_FILE = sys.argv[6]   # name for model output file (script adds the correct extension)
PRED_FILE = sys.argv[7]     # raw (not rounded) predictions (in rows, no extension will be added)
NUM_BOOST_ROUNDS = int(sys.argv[8])  # no. boost rounds, typical value = 500
MAX_DEPTH = int(sys.argv[9])        # default -1 for no limit, typical value can be 15
MIN_LEAF_DATA = int(sys.argv[10])   # default 20, typical values is 50
LEARN_RATE = float(sys.argv[11])     # learning rate (typical 0.01)
try:
    RAND_STATE = int(sys.argv[12])
except:
    RAND_STATE = 324
try:
    NTHREADS = int(sys.argv[13])
except:
    NTHREADS = 0

# If any of PREDICT_FILE or OUTPUT_FILE are set to "na",
# then it won't be used

data = pd.read_csv(DATA_FILE)

feature_names = np.loadtxt(FEATURE_NAMES, dtype='str')
x = data[feature_names].values
# mask values that are unavailable -- indicated as negative
x = np.where(x < 0, np.nan, x)

# groups = data[GROUP_LABELS_COL].values
groups = pd.read_csv(GROUP_LABELS_CSV).values

y = data[CLASS_LABELS_COL].values
trainindex_col = data[TRAIN_INDEX_COL].values

trainindex = np.where(trainindex_col == 1)[0]
xtrain = x[trainindex]
ytrain = y[trainindex]
traingroups = groups[trainindex]

datatrain = gpb.Dataset(xtrain, ytrain)
gp_model = gpb.GPModel(group_data=traingroups, likelihood='binary')

params = {'objective':'binary', 'learning_rate':LEARN_RATE, 'seed':RAND_STATE,
    'max_depth':MAX_DEPTH, 'min_data_in_leaf':MIN_LEAF_DATA, 'verbose': 1, 'n_threads':NTHREADS}

bst = gpb.train(params=params, train_set=datatrain, gp_model=gp_model, num_boost_round=NUM_BOOST_ROUNDS)

if OUTPUT_FILE.lower() != "na":
    bst.save_model(OUTPUT_FILE+".json")

if PRED_FILE.lower() != "na":
    pred = bst.predict(data=x, group_data_pred=groups)
    np.savetxt(PRED_FILE, pred['response_mean'])
